//######################################## rk_methods ########################################
#define EPS 1.0e-14

#define rkc2 0.526001519587677318785587544488e-01
#define rkc3 0.789002279381515978178381316732e-01
#define rkc4 0.118350341907227396726757197510e+00
#define rkc5 0.281649658092772603273242802490e+00
#define rkc6 0.333333333333333333333333333333e+00
#define rkc7 0.25e+00
#define rkc8 0.307692307692307692307692307692e+00
#define rkc9 0.651282051282051282051282051282e+00
#define rkc10 0.6e+00
#define rkc11 0.857142857142857142857142857142e+00
#define rkc14 0.1e+00
#define rkc15 0.2e+00
#define rkc16 0.777777777777777777777777777778e+00

#define rkb1 5.42937341165687622380535766363e-2
#define rkb6 4.45031289275240888144113950566e0
#define rkb7 1.89151789931450038304281599044e0
#define rkb8 -5.8012039600105847814672114227e0
#define rkb9 3.1116436695781989440891606237e-1
#define rkb10 -1.52160949662516078556178806805e-1
#define rkb11 2.01365400804030348374776537501e-1
#define rkb12 4.47106157277725905176885569043e-2

#define rkbhh1 0.244094488188976377952755905512e+00
#define rkbhh2 0.733846688281611857341361741547e+00
#define rkbhh3 0.220588235294117647058823529412e-01

#define rker1 0.1312004499419488073250102996e-01
#define rker6 -0.1225156446376204440720569753e+01
#define rker7 -0.4957589496572501915214079952e+00
#define rker8 0.1664377182454986536961530415e+01
#define rker9 -0.3503288487499736816886487290e+00
#define rker10 0.3341791187130174790297318841e+00
#define rker11 0.8192320648511571246570742613e-01
#define rker12 -0.2235530786388629525884427845e-01

#define rka21 5.26001519587677318785587544488e-2
#define rka31 1.97250569845378994544595329183e-2
#define rka32 5.91751709536136983633785987549e-2
#define rka41 2.95875854768068491816892993775e-2
#define rka43 8.87627564304205475450678981324e-2
#define rka51 2.41365134159266685502369798665e-1
#define rka53 -8.84549479328286085344864962717e-1
#define rka54 9.24834003261792003115737966543e-1
#define rka61 3.7037037037037037037037037037e-2
#define rka64 1.70828608729473871279604482173e-1
#define rka65 1.25467687566822425016691814123e-1
#define rka71 3.7109375e-2
#define rka74 1.70252211019544039314978060272e-1
#define rka75 6.02165389804559606850219397283e-2
#define rka76 -1.7578125e-2
#define rka81 3.70920001185047927108779319836e-2
#define rka84 1.70383925712239993810214054705e-1
#define rka85 1.07262030446373284651809199168e-1
#define rka86 -1.53194377486244017527936158236e-2
#define rka87 8.27378916381402288758473766002e-3
#define rka91 6.24110958716075717114429577812e-1
#define rka94 -3.36089262944694129406857109825e0
#define rka95 -8.68219346841726006818189891453e-1
#define rka96 2.75920996994467083049415600797e1
#define rka97 2.01540675504778934086186788979e1
#define rka98 -4.34898841810699588477366255144e1
#define rka101 4.77662536438264365890433908527e-1
#define rka104 -2.48811461997166764192642586468e0
#define rka105 -5.90290826836842996371446475743e-1
#define rka106 2.12300514481811942347288949897e1
#define rka107 1.52792336328824235832596922938e1
#define rka108 -3.32882109689848629194453265587e1
#define rka109 -2.03312017085086261358222928593e-2
#define rka111 -9.3714243008598732571704021658e-1
#define rka114 5.18637242884406370830023853209e0
#define rka115 1.09143734899672957818500254654e0
#define rka116 -8.14978701074692612513997267357e0
#define rka117 -1.85200656599969598641566180701e1
#define rka118 2.27394870993505042818970056734e1
#define rka119 2.49360555267965238987089396762e0
#define rka1110 -3.0467644718982195003823669022e0
#define rka121 2.27331014751653820792359768449e0
#define rka124 -1.05344954667372501984066689879e1
#define rka125 -2.00087205822486249909675718444e0
#define rka126 -1.79589318631187989172765950534e1
#define rka127 2.79488845294199600508499808837e1
#define rka128 -2.85899827713502369474065508674e0
#define rka129 -8.87285693353062954433549289258e0
#define rka1210 1.23605671757943030647266201528e1
#define rka1211 6.43392746015763530355970484046e-1
#define rka141 5.61675022830479523392909219681e-2
#define rka147 2.53500210216624811088794765333e-1
#define rka148 -2.46239037470802489917441475441e-1
#define rka149 -1.24191423263816360469010140626e-1
#define rka1410 1.5329179827876569731206322685e-1
#define rka1411 8.20105229563468988491666602057e-3
#define rka1412 7.56789766054569976138603589584e-3
#define rka1413 -8.298e-3
#define rka151 3.18346481635021405060768473261e-2
#define rka156 2.83009096723667755288322961402e-2
#define rka157 5.35419883074385676223797384372e-2
#define rka158 -5.49237485713909884646569340306e-2
#define rka1511 -1.08347328697249322858509316994e-4
#define rka1512 3.82571090835658412954920192323e-4
#define rka1513 -3.40465008687404560802977114492e-4
#define rka1514 1.41312443674632500278074618366e-1
#define rka161 -4.28896301583791923408573538692e-1
#define rka166 -4.69762141536116384314449447206e0
#define rka167 7.68342119606259904184240953878e0
#define rka168 4.06898981839711007970213554331e0
#define rka169 3.56727187455281109270669543021e-1
#define rka1613 -1.39902416515901462129418009734e-3
#define rka1614 2.9475147891527723389556272149e0
#define rka1615 -9.15095847217987001081870187138e0
#define rkd41 -0.84289382761090128651353491142e+01
#define rkd46 0.56671495351937776962531783590e+00
#define rkd47 -0.30689499459498916912797304727e+01
#define rkd48 0.23846676565120698287728149680e+01
#define rkd49 0.21170345824450282767155149946e+01
#define rkd410 -0.87139158377797299206789907490e+00
#define rkd411 0.22404374302607882758541771650e+01
#define rkd412 0.63157877876946881815570249290e+00
#define rkd413 -0.88990336451333310820698117400e-01
#define rkd414 0.18148505520854727256656404962e+02
#define rkd415 -0.91946323924783554000451984436e+01
#define rkd416 -0.44360363875948939664310572000e+01
#define rkd51 0.10427508642579134603413151009e+02
#define rkd56 0.24228349177525818288430175319e+03
#define rkd57 0.16520045171727028198505394887e+03
#define rkd58 -0.37454675472269020279518312152e+03
#define rkd59 -0.22113666853125306036270938578e+02
#define rkd510 0.77334326684722638389603898808e+01
#define rkd511 -0.30674084731089398182061213626e+02
#define rkd512 -0.93321305264302278729567221706e+01
#define rkd513 0.15697238121770843886131091075e+02
#define rkd514 -0.31139403219565177677282850411e+02
#define rkd515 -0.93529243588444783865713862664e+01
#define rkd516 0.35816841486394083752465898540e+02
#define rkd61 0.19985053242002433820987653617e+02
#define rkd66 -0.38703730874935176555105901742e+03
#define rkd67 -0.18917813819516756882830838328e+03
#define rkd68 0.52780815920542364900561016686e+03
#define rkd69 -0.11573902539959630126141871134e+02
#define rkd610 0.68812326946963000169666922661e+01
#define rkd611 -0.10006050966910838403183860980e+01
#define rkd612 0.77771377980534432092869265740e+00
#define rkd613 -0.27782057523535084065932004339e+01
#define rkd614 -0.60196695231264120758267380846e+02
#define rkd615 0.84320405506677161018159903784e+02
#define rkd616 0.11992291136182789328035130030e+02
#define rkd71 -0.25693933462703749003312586129e+02
#define rkd76 -0.15418974869023643374053993627e+03
#define rkd77 -0.23152937917604549567536039109e+03
#define rkd78 0.35763911791061412378285349910e+03
#define rkd79 0.93405324183624310003907691704e+02
#define rkd710 -0.37458323136451633156875139351e+02
#define rkd711 0.10409964950896230045147246184e+03
#define rkd712 0.29840293426660503123344363579e+02
#define rkd713 -0.43533456590011143754432175058e+02
#define rkd714 0.96324553959188282948394950600e+02
#define rkd715 -0.39177261675615439165231486172e+02
#define rkd716 -0.14972683625798562581422125276e+03

double rk853(double &t, double *x, const double dt,
             void(*get_v)(double t, double *x, double *v))
{
  double v1[3];
  double v2[3];
  double v3[3];
  double v4[3];
  double v5[3];
  double v6[3];
  double v7[3];
  double v8[3];
  double v9[3];
  double v10[3];

  double tmpx[3];

  for (int n=0; n<3; n++) tmpx[n] = x[n];
  get_v(t, tmpx, v1);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*rka21*v1[n];
  get_v(t+rkc2*dt, tmpx, v2);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*(rka31*v1[n]+rka32*v2[n]);
  get_v(t+rkc3*dt, tmpx, v3);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*(rka41*v1[n]+rka43*v3[n]);
  get_v(t+rkc4*dt, tmpx, v4);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*(rka51*v1[n]+rka53*v3[n]+rka54*v4[n]);
  get_v(t+rkc5*dt, tmpx, v5);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*(rka61*v1[n]+rka64*v4[n]+rka65*v5[n]);
  get_v(t+rkc6*dt, tmpx, v6);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*(rka71*v1[n]+rka74*v4[n]+rka75*v5[n]+rka76*v6[n]);
  get_v(t+rkc7*dt, tmpx, v7);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*(rka81*v1[n]+rka84*v4[n]+rka85*v5[n]+rka86*v6[n]+rka87*v7[n]);
  get_v(t+rkc8*dt, tmpx, v8);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*(rka91*v1[n]+rka94*v4[n]+rka95*v5[n]+rka96*v6[n]+rka97*v7[n]+rka98*v8[n]);
  get_v(t+rkc9*dt, tmpx, v9);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*(rka101*v1[n]+rka104*v4[n]+rka105*v5[n]+rka106*v6[n]+rka107*v7[n]+rka108*v8[n]+rka109*v9[n]);
  get_v(t+rkc10*dt, tmpx, v10);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*(rka111*v1[n]+rka114*v4[n]+rka115*v5[n]+rka116*v6[n]+rka117*v7[n]+rka118*v8[n]+rka119*v9[n]+rka1110*v10[n]);
  get_v(t+rkc11*dt, tmpx, v2);

  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*(rka121*v1[n]+rka124*v4[n]+rka125*v5[n]+rka126*v6[n]+rka127*v7[n]+rka128*v8[n]+rka129*v9[n]+rka1210*v10[n]+rka1211*v2[n]);
  get_v(t+dt, tmpx, v3);

  for (int n=0; n<3; n++) v4[n]   = rkb1*v1[n]+rkb6*v6[n]+rkb7*v7[n]+rkb8*v8[n]+rkb9*v9[n]+rkb10*v10[n]+rkb11*v2[n]+rkb12*v3[n];
  for (int n=0; n<3; n++) tmpx[n] = x[n] + dt*v4[n];

  double rtol = 1.0e-9;
  double atol = 1.0e-14;

  double xerr[3], xerr2[3];

  for (int n=0; n<3; n++) xerr[n]  = v4[n]-rkbhh1*v1[n]-rkbhh2*v9[n]-rkbhh3*v3[n];
  for (int n=0; n<3; n++) xerr2[n] = rker1*v1[n]+rker6*v6[n]+rker7*v7[n]+rker8*v8[n]+rker9*v9[n]+rker10*v10[n]+rker11*v2[n]+rker12*v3[n];

  double rlx[3];
  for (int n=0; n<3; n++) rlx[n] = atol+rtol*max( abs(x[n]) , abs(tmpx[n]) );

  double err=0.0, err2=0.0, deno;
  for (int n=0; n<3; n++) err2 += pow( xerr[n]/rlx[n], 2);
  for (int n=0; n<3; n++) err += pow( xerr2[n]/rlx[n], 2);

  deno = err+0.01*err2;
  if (deno <= 0.0) deno=1.0;

  err = abs(dt)*err*sqrt(1.0/(6.0*deno));

  t += dt;
  for (int n=0; n<3; n++) x[n]  = tmpx[n];
  
  return err;
}

double adap_rk853(double &x, double *y, double &dx,
                  void(*get_v)(double t, double *x, double *v), bool &acc)
{
  double x_i, err;
  double y_i[3];
  bool cont;

  x_i = x;
  for (int n=0; n<3; n++) y_i[n] = y[n];

  //if (x_i+dx>endpoint) dx = endpoint-x_i;

  err = rk853(x, y, dx, get_v);
  if (err>1.0) {cont=false; acc=false;}
  else {cont=true; acc=true;}

  while (!cont)
  {
    dx *= pow(err,-0.125);
    x = x_i;
    for (int n=0; n<3; n++) y[n] = y_i[n];

    //if (x_i+dx>endpoint) dx = endpoint-x_i;

    err = rk853(x, y, dx, get_v);
    if (err-1.0<=EPS) cont=true;
  }

  if (acc) dx *= 1.05;

  return err;
}
